 All right, guys
 Let's chat about C++ and subtyping
 Welcome back to class
 It's week nine
 We're going to be talking about statically typed object-oriented languages, language C++
 We're also going to dive into subtyping
 Very fun
 All that other good stuff
 More importantly, this is my little daughter, Maeve Pester
 She is five days old today and having a great time
 With that said or shown, I might be slightly less responsive to emails and things of that nature
 I will still try my best to get back to you on anything
 I will definitely resolve them
 In general, I will always tend to be whatever is most fair to you guys and not try to disappear on you
 I will definitely try to get back to you on my own
 Please just a little bit of extra leeway on any timeline on my end
 I think means PA eight is going to be delayed, but I will get back to you on that
 You guys will like it for the most part
 It's only good things
 Another quick thing
 The course catalog for fall, I believe, is out, which means that you can learn about the other course other than CS538
 I will be teaching next semester
 Hopefully you guys are not taking that because you're all going to pass
 CS638 is called Applied Natural Language Processing
 It's a one credit course
 I will be teaching it for the first time
 It has never been taught before because it's on a field that did not exist prior to about six months ago
 That is in context learning and the science of prompt engineering
 This is not your kind of super meme
 Let's what can we get chat GPT to say? Let's do science on what tokens matter when we send them to a large language model
 How do they affect the result that we're going to get? There will be a heavy dose of what I have learned from working in industry
 Finally, it's not going to be an easy course, but I think it will be an extremely rewarding course
 I will be asking you to do a lot for being only one credit
 If any of this sounds interesting to you, take a look, sign up
 It is a small size for enrollment, but that doesn't mean you can't get in
 One more update
 The rest of the semester, what is it going to look like? We're currently in this top row
 We've got the start of April
 We're going to be talking about virtual tables, subtyping inheritance in C++
 Today, we will finish that on Wednesday and then start talking about control flow and continuations
 Your code is going to be rust this week
 The assignment is not super hard, but it's not super easy either
 I don't provide you any in-class time talking about rust
 Start early
 There are a million tutorials on how to write rust code
 I think I link a few in the actual assignment
 Your project is to write a calculator
 It will look just like your Haskell calculator or very similar, but it's written in Rust instead
 Next week, I think we're going to push these
 That is going to be given potentially a little bit extra time, not a full week
 Then the next PA will be bumped down a week or something like that
 Then we've got control flow, the midterm, and then the end of the semester where we're basically going to chill
 I'm going to tell you about some really cool things in programming languages
 You're going to be working on a small, final project, and we will be having a lot of fun doing interesting work
 That's the semester
 Any questions? Any other course questions? Yes
 The final project is going to be 10% of your grade
 It's going to look very similar to a homework, but it will be a group project
 It will have some code, some written assignment combined
 You'll have two and a half weeks to work on it basically
 It's in place of a final
 You don't show up on 5
5, or whenever our time slot is, just skip that exam slot
 That's when it's due, I believe
 Any other questions? This is the end of the normal stuff
 The stuff that when you talk about programming languages, people are like, yeah, that's the sort of thing that we would cover
 Control flow and continuations is where we're going to start to get off the beaten path
 But for today, we're going to be talking about C++
 Why are we talking about C++? Because everybody uses C++
 It's a large language
 It's an object-oriented extension of C
 So, if you're working on Python, you might be using the C Python, which is written in C++ in part
 So, it's like a very common base language because it's very fast
 C++ is interesting
 It's got a lot of efficiency and flexibility that come from C
 But it's also a large language
 It's got a ton of different features that you can talk about in particular object-oriented features that we will be talking about that come from similar
 All of these features mean there are lots of interesting design decisions
 Things like, should we go this way, should we go that way, should we have memory management, should we have direct access memory, should we have both? What are the advantages, what are the disadvantages, all of these good things? The language is still growing
 C++ 23 is in release candidate stage right now, I believe
 So, people are saying, this is what C++ today should look like
 But, despite adding lots of features, it's extremely backwards compatible
 You can compile code written in 1990 in C++ or 1995 in C++ with the C++ 23 compiler
 That's not true with most languages
 If you tried to execute a Python file from 1995 with the Python 311 interpreter, it's not going to work, most likely
 Because there have been so many language level changes that have completely changed how you write Python
 C++ has mostly stayed the same, despite all of the features that have been added
 And, as my daughter, she's very brilliant, the first thing she said is what you don't pay for
 That was actually beyond the creator of C++
 So, C++ wants to be a language that lets you do anything, but doesn't penalize you if you don't do it
 You can have memory management done for you if you want, or you can use pointers and get all the benefits of direct memory management
 So, that's why we're talking about C++
 You guys will likely encounter C++ out in industry because it's just been such a dominant language for so long
 However, we aren't actually writing any C++ code
 So, keep that in mind
 Some of the examples that we use, you can definitely type them up and experiment with them, but I'm not expecting you to learn C++ if you haven't used it before
 In our day one slides, we looked a little bit at what C++ concepts are highlighted
 We have encapsulation, dynamic lookup, inheritance and subtyping
 These are our four object-oriented core concepts
 With C++ encapsulation, you can do things like have private classes, private methods, public classes, public methods
 You have friend classes, I've never understood that one
 I really need to read up on it
 It just doesn't seem useful, but I'm sure it is
 Dynamic lookup, we have virtual functions, and that's what we're going to be talking a lot about today, where we want to be able to emulate the overloading functionality that we get with type classes in Haskell
 But do it in C++
 There's lots of inheritance in C++, it's object-oriented
 So, obviously, you're going to have these things
 You can do single and multiple inheritance
 So, you can have multiple super classes
 You can also have private base classes
 So, you can have private inheritance, where you get some of the functionality, but not all of the functionality
 Subtyping is directly tied to inheritance
 These are the things about C++ that make it object-oriented
 We're going to be focusing in on dynamic lookup
 What is dynamic lookup? Let's get a refresher from last class, since that was a week ago now
 What is dynamic lookup? Yeah
 I guess it's determining that one time what function is appropriate for human data? Yeah, exactly
 It's figuring out what function should we run dynamically at runtime
 So, in Haskell, we can figure out which plus function to run, whether it's plus int or plus float, at compile time based on types
 In C++, we're going to do that at runtime based on the object representation itself
 That's what dynamic lookup is
 You say, what is this object? How does that specific object want to execute this function? Okay
 So, our plan is we're going to dive into dynamic lookup in C++ with V tables or virtual tables
 Why are we doing that? Because it's an interesting way of handling this dynamic lookup in C++
 C++ lets you do dynamic or static look
 Not a lot of languages do that
 It's only interesting when inheritance comes into play
 Why is that the case? Why would dynamic or runtime lookup only be interesting if we have inheritance, meaning like class A and class B inherits from class A? If we didn't have any inheritance, what would be different? Yeah
 Yeah, then we would know what function should be executed at compile time
 Because you haven't inherited any code
 You never have to doubt, should I be executing B's version of clone or should I be executing A's version of clone? Because we can't inherit it in a world where we couldn't
 So this will only be interesting when we talk about inheritance in C++
 Let's start with a simple example
 We've got a class A
 It's got an integer value
 It's got a function that takes an integer
 And then we create a pointer to an A and we call F on that pointer
 How do we know what F function to run? What information is necessary to find what is F? Yeah
 The type of P A specifically
 So P A we're calling F
 What is the type of P A? It's an A pointer
 So we need to know what is the type of the thing that's calling the function
 What does the actual object look like? If we created a P A, what would that look like on the stack? Or on the, I guess, this is a pointer
 What information are we storing? Yeah
 So what would that tell us? So this is what's to do
 We would be creating for example a P A, which will have an A
 Which is an int
 And it will have an F, which is going to be a pointer to some function definition
 What's the purpose of storing A? Not a trick question
 What's the purpose of storing A? Yeah
 Yeah
 Yeah
 So that we can use it
 We have an A, like our lower case A is just like a value on our object
 We need to be able to store it so that we can use it
 What's the purpose of storing this F? Yeah
 So that we can use it later
 That's a reasonable answer
 We want to be able to call P A F at some point in the future
 So we need to know what is F
 This is one of those pieces of PL where it's important to take a step back and not take anything for granted
 The language is not magic
 It needs to be storing information so that it can use it at a future point in time
 But now I have another question
 Let's say we create a P B or a P A 2
 What's going on here? We've created another value A that is local to this new P B
 And we created another local value F that is pointing to that same code
 C++ is built on its reputation for speed and performance
 How can we optimize this? Yeah
 Having a second, can you elaborate on that? So having a separate function definition in memory, like having F here
 And then we can just get rid of these
 If we get rid of the Fs here and we just have a single F, any time we want to call F, we don't have to, first of all, do an indirect access across memory, which is slow
 And second of all, our P A and P B are now only the size of an int
 They're four bytes or whatever your int width is
 So we've saved in two ways
 But what problem are we going to run into? Yeah
 We need to know that you're using specifically function F and type of cloud
 We need to know that we're using function F at compile time, definitely
 Not only that, what else do we need to know? Yeah
 We need to return nowhere to return it to
 That's going to come from just the inner workings of it being a function
 But that's something that we have to keep track of as we are executing the function for sure
 What happened if we have a second class, class B? Still no inheritance in play
 It's just class B
 And it has a function F
 What's that? They would alias to the same F
 We would be redefining the F, which would be problematic
 So not only do we need to be storing this F, but we actually want to say specifically it's the A version
 And then we could have a B version of F and a C version of F
 Everyone can have their own F
 And then at compile time, if I know that you are an A type object and you're calling the F function, then I can just use this function here
 And I don't need to store a pointer to that function on my object, which means I don't need to cross memory
 And my objects can be simpler
 So what this looks like, we can say that the runtime representation of an object of type A will be just the integer A
 Nothing more
 And what we need the info to actually look up which function to execute, which version of F, we just need the type of the pointer
 So if I have an A pointer, use the A version of F
 If I have the B pointer, use the B version of F, et cetera
 And importantly, the step not written here is rewrite that void F int to be a function that looks like this, where we're calling it the A version of F
 Any questions on how we've unwrapped this? We can take a second there
 Yeah
 So that function is the right for files
 Could you like rewrite it when you call that directly in your code and have it compiled and you can still call that another code in your native? So generally no
 Because like the compiler will look at something like this, and it doesn't exist when you are writing your code
 So then when it tries to parse your code, it says that function does not exist
 Then it's going to go through a series of optimizations and rewriting your code so that it's efficient and generate a function signature that looks something like that
 If you hacked into, you know, hacked into, if you were messing around with the executable, then you could actually reference that specific function
 But that would not be writing C++
 That would be writing, you know, whatever the binary is
 Yeah
 So having like this, PA have a version of F and PB have a different version of F
 No, not in general
 Definitely not with the setup that we have right here
 And that's one of the features of one of these more strict languages is that an object always looks like what its type tells you it will look like
 If the type says it's got an A, int, and an F function, those are the two things on it and it will always use those two things
 When you look at a language like JavaScript, that's not the case
 Then each object that is, they're all vehicles, but one of them actually looks like a cat, you know, and it has totally different functions
 Other questions? Let's add some inheritance
 Let's make it a bit more interesting
 So we still have our class A
 It's got an int, it's got a void F
 Then we have a class B
 And if you haven't written a lot of C++, we have this colon here to say that class B is a subtype of class A
 It's inheriting A, publicly
 You could also have it be a private inheritance
 B has a B and a G
 C is a B
 C has a C and an H
 And I've got a question for you
 Talk with your neighbor
 Come to an answer
 Yes or no? Does runtime representation of A objects change from the previous slide? Talk with your neighbor
 I'll give you 30 seconds
 If you can see, you can see that the A, the runtime representation of A, the R, the R, the R, the R, the R, the R, the R, the R, the R
 So we have a lot of C
 What do we think? How many people vote? Yes
 How many people vote? No? A lot of knows
 Can someone say why? Yeah, go for it
 If something is inheriting something, how could something in inheriting that possibly change the original object? Yeah
 If I'm like extending something somebody else has done, I might change, but I'm not changing that object
 That's reasonable
 That's not to say it couldn't be the case
 You might have a language where when you extend a supertype, you actually update the supertype to track all of its child types or something of this sort
 So it is possible in C++, definitely no
 Your runtime representation is going to stay exactly the same
 What would our B and C objects look like? What would be looked like? What would the runtime representation of that B? What do you think? Yeah
 So it would have int, A, and B, and functions, F, and G
 If we look over here, why have functions F and G? If we can get away with less, we want to get away with less
 That's like the second motto of C++
 If you can make it faster, you should
 So we don't need to store F and G in our objects
 Just like we didn't need to store them here
 We're going to have a separate compiled version of those functions, F and G, but the object itself doesn't need to track that information
 So all that we need is the A and B
 Yeah
 What about the concept of self? Yeah
 So that's actually an interesting point that I kind of skipped over here
 If we look at the definition of this A, F, A's version of F, we've rewritten it to not be a function that takes an integer, but to be a function that takes a pointer to an A and an integer
 So all functions will be rewritten so that the object is passed as the first parameter to the function itself
 That's how we can access the A value inside P A
 Does that answer your question? Yeah
 Cool
 So what do we think about the C object? Yeah
 A, B, C
 The objects themselves only track the data properties on them, not the methods on them
 And then we would have all sorts of different A, F, G, F, B, G, C, H, et cetera
 Okay
 There's stuff on there
 That's fine
 So now we're going to look at virtual
 So this was normal functions
 We have void G, void H, void F
 These are static type-based functions, not dynamic lookup
 This is compile time lookup
 Now we're going to look at dynamic lookup
 Let's actually do the object oriented thing where we want each object to decide what function should be executed
 So we can have a class A and we're going to have virtual functions as a keyword to say this is a dynamic function
 B is going to extend A and it's got a G
 This should be virtual
 Maybe they don't need to be virtual
 It's still a virtual void G and a virtual void H
 But I think you can drop the virtual without a compiler
 In fact, you might have to
 We then create a C pointer and we call the C pointer of G
 Our C object has been updated a little bit to include what we call a virtual pointer to a virtual table, a V pointer to a V table
 And that V pointer has the exact purpose of what we were doing over here to start where we said we have an F on the object
 And then whenever we want to call PAs version of F, we would go to PAs lookup F execute F
 So we're going to build this functionality back into the object for special cases
 But in the default case, we can still use this compile time version, which is much more efficient
 So virtual is this new keyword cool
 It adds a V pointer to your object and that V pointer points to a bunch of functions
 A is version of F
 B is version of G
 C is version of H
 Yeah, question
 Why would we define all three within plus A and A you already get? Yeah, so what would be the runtime representation of A? Oh, that's not the right thing
 And the other one is lost
 So, yes
 While I erase this, think to yourself, what would be the runtime representation of an A object? Maybe draw it out on your paper
 Okay
 All right
 What would this look like? Yeah
 What would be the same thing without an in C? So we're going to start with a V pointer
 Right
 And then we have int A
 Okay
 What does V pointer point to? So it's pointing to our V table
 I don't know why I drew the full box
 What goes in here? It points to F
 Yeah
 Exactly
 So we're going to have an a F, an a G, and an a H
 Because those functions are declared in that first class
 Then as we extend the class with class B, where we're saying now G is equal to this other function for B, we're going to have another V table for all B objects, where we have a B G and an a H
 And then by the time we get to see, we have this final form
 Yeah
 Yeah
 Don't we want to avoid indirect jumps in memory? Definitely
 It's one of the slower things that you can do when you're computing
 But what else are you going to do? It's one of the fundamental problems to say I have an object that I want to dynamically figure out what it is to execute on it
 If you come up with a better way to do it, let me know because that would be interesting for a new language
 Yeah
 Why don't we have specific versions of F G and H for class A? So for example, having this a F style
 Right? I want to clarify, we could do this
 But this is based on the type of the object at compile time
 This structure is based on the representation of the object at runtime
 When is there a disparity between those two things? What's an example of why those would run into conflict where they won't be the same? Yeah
 If we change the type of the object during runtime
 So the simple way to see that we don't eat this one anymore
 It's something that you all have almost certainly done
 What is the type of A? How many people say A? How many people say B? We have some disagreement
 About 50-50 split, too, on whether it's A or B
 Let me give you a second question in the as a hint
 What is the runtime representation of A? Is it A? Is it B? All right
 So I got very few A's, a decent number of B's
 What's going on here? Can someone explain? The one line English summary of what this is
 What are we doing here? Yeah
 We're instantiating a new object
 Add more to that
 Yeah
 Any B object can be interpreted as an A
 Exactly
 That's what subtyping means
 Because B is a subtype of A, any B can be treated as an A
 That's step one
 Awesome
 We are instantiating a new blank object of type blank
 How do you spell instantiating? That's a T
 That's instantiating
 Is that right? Yeah
 It's like instant
 Yeah
 Yeah
 Okay
 But an instance is with this
 All right
 Write this sentence down with your answers
 Okay
 Okay
 All right
 Can someone read to me their sentence and give me an explanation of why? Go for it
 Okay
 Instantiating a new B object of type A
 Why? So we're creating a B
 We're instantiating a new B
 We're creating a B object
 It's of type A because we're specifying the type here
 Just like we would say int x equals three
 So we're instantiating a new B object of type A
 Now, if we were using the initial like underscore underscore f a or a f, whatever I called it, this was based on the type of the thing that we were executing
 Which means if we try to execute f on this a, we would only ever find the capital a version of that f
 We would never be able to find the B version of f
 But B is overriding f
 We want to use the B version of f
 So how can we access it? Yeah
 With casting
 Sure
 So yes, we could, I really wish I had more whiteboard space
 We could say cast this thing to be a B pointer arrow f
 Now we know the type of the thing is B
 We're calling the function f
 It's B's version of f
 Great
 We're done
 All right, but I wanted it to actually be an A
 Let me write a very simple function here
 We'll push this up for a second
 So if I create a new function, void function that takes an A pointer
 So this function is relatively straightforward
 All it does is it takes an A and it calls a's version
 It calls a f
 Let me use different things
 It takes a variable x of type a or pointer to a
 And it calls x's f
 Will this ever use first question? Can we call f of? We can call this p B
 Why not? Can we call f of p B? And if so, what is the expected result? Yeah
 So we can call f of p B
 We can call f of p B because we can use a B anywhere we would use an f
 Where do I get it? We can use a B anywhere we would use an A
 That's what subtyping means
 So we can pass a B to our function f n
 And it will be treated as an A
 A
 A type of A
 But it still is a B
 When we then call x f, if we were only looking at the type of the thing, we would only ever call a's version of f
 Because the type of x is A
 Always
 The type of x here is never going to be B
 The runtime representation of x could be an A
 It could be a B
 It could be a C
 So if we wanted to ever get to actually use these functions, G, this version of G or this version of G, we need to know what is the actual object here
 What is the actual runtime version of that object? And this is kind of the fundamental issue
 So we could rewrite as much as we want into these AFs
 But if all we ever look at is the type, we're not going to be able to solve this problem
 Because I want this to use the B version of F
 There's a lot to unpack there
 Let me take a moment
 Collect your thoughts
 We can treat this as a merkeous point, but a tone down one
 Just 30 seconds
 Think about this whole setup
 What questions come up out of it? Yeah, so that's how the dynamic look up will actually work
 Yeah
 Yeah
 Okay, what do we think? What can I clarify? What questions do you have? None? All right, we'll keep going
 So let's finish this slide then
 Info necessary to look up the function
 What do we need to know in order to actually call G or H or F? Yeah
 The V table
 Yeah, specifically what the object looks like at runtime
 We need to know what is the value in the V table for G, for example
 And because we are writing C++ and we want this to be very optimal, your V pointer will always be your first element of your object
 And the indexes into that V table will be known
 So we can rewrite your function call PC to G to be PC to the V pointer at index 1, which is G, and then pass in PC itself and 2
 So this is kind of what you were asking
 So we can optimize a little bit to say this is the exact place to go to call this function
 But we haven't optimized everything because we are actually still going through memory to try and find this function
 Okay, last call for questions before I have some questions for you
 Yeah
 So if we create a B, so we have a B pointer call it PB again is a new B
 And then we create an A pointer, A, and we say A equals PB
 Is that right? Yeah, what should happen here? Let's start with no virtual functions in a world of just compile time code, no dynamic lookup, what should happen here? Yeah
 So A has the A integer and all of the functions from A, B has the B integer and all of the functions from B
 First of all, what happens to that in B? Do we keep it? Do we drop it? What should we do? So in terms of the runtime representation of the object, what should we do? Are we keeping it because it's data? Potentially, where is this object created? So I assumed that we're creating objects on the heap
 If we create objects on the heap, there's no reason to erase the data that we had
 That would be kind of inefficient, which means you might actually still be able to access B on the A object
 You shouldn't ever be able to, but you might be able to
 On the other hand, if we created these on the stack, and we just had a B, and then we had an A, and we said A equals B, very similar looking code, but we can't actually modify our stack frame
 And so we need to adjust this A to only have the information that an A can have
 So we will actually drop the B integer when we're on the stack
 The answer to what is kept and what's lost and which versions are used when we do assignment become much trickier
 In general, the best thing to do is to play around with a C++ compiler and put a couple of print statements in and see what you can access
 All of the code examples that we do for C++ are simple enough that they'll take five minutes to type out
 It's always worth trying
 But it gets kind of funky when you start doing assignment
 So we don't cover too much of that
 Yeah
 It might
 So will the version of your C++ compiler affect the behavior of things like assignment or any of this
 To some extent, yes, to some extent, no
 C++ is a language with a specification
 That specification says this is what your compiler must do for many different cases
 But it leaves a lot of the details out
 So the compiler can decide how should we choose to implement assignment on the stack
 That could be variable between for example, GCC and visual studios C++ compiler
 I don't have the answer to the specifics though
 So assignment on the heap is a bit more flexible
 So we just kind of treat it as an easier thing where you just do a natural looking assignment as opposed to this kind of cut off truncating assignment
 Yeah
 Yeah
 Right
 So if they are virtual functions, then we're going to have this viewpointer to a V table
 And we need to make sure we have the right V table
 Because if I say an a is equal to a B
 And then I try and call the G function
 Well, B's version of G might reference the int B that's stored in the B class
 We're reusing the same variable name so many times here
 But we can't use this G if we have an a object
 If we say a equals a B and we're like doing that assignment
 We don't want to use this G because it might not exist anymore because we might have truncated it off the B
 So we have to replace the V pointer with a's version of the V pointer assignment gets tricky
 It's not something that I test you on specifically because it's it's a bit of a headache to keep straight
 Yeah
 So if you try to inherit a function with so for example here
 Right
 What happens if we create a B and we call F of B or B F
 I guess
 Some of you have to over it and C plus plus before what happens
 Yeah
 Well B doesn't have an F
 Does it throw an error
 What's the purpose of inheritance
 We can reuse the code
 And we call F on B
 That's fine
 We will use the version that a has defined
 Yeah
 So our objects are only storing specifically when we aren't virtual
 Our objects will only store the int a and a B
 We don't store the functions in the objects
 So will we duplicate the kind of compiled function for B
 I don't actually have the answer to that question
 So I don't want to lead you astray
 I'll look it up then get back to you
 Yeah
 That's one of the questions I have for you
 So before we get there
 Because it's a great question and I want you guys to answer it
 Let's start with some setup questions
 Non virtual functions
 Do they get called directly
 Yes
 No
 Yes
 No
 Yes
 They do
 That's the purpose of this like underscore underscore a f
 We want to be able to directly call this function based on the type
 Virtual functions
 Do they get called directly
 Yes
 No
 No
 Great
 So let's go through the V table
 This is the purpose of a virtual function is to not be direct
 Okay
 So cool
 Virtual functions can they be redefined
 So this is your question
 Right
 Like can we have a class a with the function f
 Non virtual
 Just normal function f class B also with the function f
 Yes
 No
 What do we think
 Yes
 No
 Yeah
 I'll give you guys all credit there
 They kind of can they kind of can't
 What does that mean
 Why can they kind of kind of be redefined and kind of not be redefined
 What's the example where they can be redefined
 Where we succeed in using the B version of f when we have this setup
 Let me draw it out
 But
 So we have class a with a void f
 We have class B extends a with a void f
 I want to call this function
 How can I do that
 Give me a little bit of code to write so I can actually call that function
 Yeah
 Yeah
 Exactly
 We create a B
 A B object of type B
 Standard stuff and call B
 This is going to use this version of f
 How can I use this version of f
 Yeah
 We can typecast it to me
 Yeah
 So yes, even simpler if we just like had an a
 So we can do the same exact thing
 Create an A pointer is a new a
 And then call a f
 That will use this one
 But then to your point we can actually use this version of f on this object on this object if we convert this a or this B into an a
 Now when we call f here we're looking at the type of the thing the type is this f we use this f
 So it's kind of being overloaded
 We were able to use this same symbol f to do a different thing
 But if we ever get to the place where we're trying to do something like this we will never be able to use the B's version of f
 Questions
 Yes
 So we have the function that we execute based on the object not the type of the object
 So when we're using polymorphism and we have some base class in a function that takes that base class
 But what we do inside of that function with that object depends on the object not the base class version of the object
 For example something like that function
 So non virtual functions they can be overloaded
 Oh we should go down a little bit
 They can be overloaded
 But the issue that we run into is that we don't actually get the full functionality that we want
 So this is kind of like the root problem that we're solving for and we haven't done that
 So naturally the second question to ask is virtual functions
 Can we redefine them? Can they be redefined? If we were doing the same thing but those were virtual f's is that okay
 Yes
 No
 No
 No
 This one's just yes
 That's kind of the point is that we can overwrite and redefine the previous version of f for our B
 We get to have a new version of it
 So if we create this is you know same ish code is before we have an f that's doing parent and an f that's doing child
 If we create this a type with a B representation
 And then we call f which version does it use? Does it use the a version of f or the B version of f? It uses the B version of f
 Because the a has a virtual pointer to a virtual table where it's got B stored the B version of f stored
 And when we compile this thing at or we we turn it into something that will look up at runtime the actual information that we need
 Questions
 Okay
 Dropping the virtual exact same code that just changed the function to no longer be virtual which version of f is executed
 I heard a couple people say a a's version of f this is a compile time check and at compile time this object is an a
 We're looking at the type of the pointer it compiles to a f
 This is a lot of text I should have done that as a animation
 So what we've talked about so far has been c++ specific in languages like small talk which we didn't cover too much of we can mostly ignore it whatever but in languages people use like JavaScript or Python you don't have any static checking there is no underscore underscore a f
 Everything is this dynamic version where you say go look at the object what does the object say that function is
 So object method with an argument can refer to literally anything you have to go to the object find out what function it's talking about execute that
 And importantly the location in the dictionary or hash table will vary that means if I have two different objects that are the same type they don't necessarily look the same I might have modified object one to have a different function like set then object to
 C++ that's not the case we have a static type system which means we know more information we can optimize more and it also means that you the programmer have to write more code and keep track your types better
 Okay
 The point of all of this is that's kind of a weird point actually I don't like this slide the point of all of this is this
 So slowly going up I want to be able to write this function this is the point I want to write this function and when I call f I want to use not always the a version of that
 But if I'm trying to be all static and do it that way I'm never going to get anything else
 So I'd say that's the takeaway not that we can invoke function point here to fix offset in the V table but you can do that
 And that's a bit of an optimization so that's nice
 Yeah questions
 So if you create a class that has no functional no virtual functions in it it won't have a V pointer because it doesn't need
 Other questions
 All right we will be picking up on this stuff with sub typing on Wednesday
 I do have office hours as normal this week so feel free to drop by with any questions
 Just good
 If you define virtual function and you're a character
 So what's the difference is that you could declare the show and be a result of the questions
 I think you have to declare it as virtual
 I think if we so
 No, no, so if we if we have a virtual here
 This is by default virtual
 And I think it gives you a compile error
 If you try and also do this it'll say that's like it's already virtual you don't need
 I'm pretty sure
 But we can double check
 We can just like literally write this exact code and see if it compiles
 And it's I don't think that you need to do this
 If you do something like if we have this and then we say that
 That is almost certainly a compile error
 So it's a virtual method
 It's kind of like the
 At a certain master
 But you can give it a definition
 Yeah, so we can actually have a virtual
 Here and then give this a you know
 Right
 Yeah
 So if it's it's not a virtual method so we look up the method from
 You You You You You You